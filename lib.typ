
#let bqn = {
  (
    system: "•",
    begin-list: "⟨",
    begin: "⟨",
    end-list: "⟩",
    end: "⟩",
    separator: "⋄",
    strand: "‿",
    "_": "‿",
    // assignments
    define: "←",
    export: "⇐",
    change: "↩",
    modify: "↩",
    // functions & operands:
    add: "+",
    conjugate: "+",
    conj: "+",
    negate: "-",
    neg: "-",
    substract: "-",
    sub: "-",
    sign: "×",
    multiply: "×",
    mult: "×",
    reciprocal: "÷",
    reciproc: "÷",
    divide: "÷",
    div: "÷",
    exponential: "⋆",
    exp: "⋆",
    power: "⋆",
    pow: "⋆",
    square-root: "√",
    sqrt: "√",
    root: "√",
    floor: "⌊",
    minimum: "⌊",
    min: "⌊",
    ceiling: "⌈",
    ceil: "⌈",
    maximum: "⌈",
    max: "⌈",
    logical-and: "∧",
    "and": "∧",
    sort-up: "∧",
    logical-or: "∨",
    "or": "∨",
    sort-down: "∨",
    logical-not: "¬",
    "not": "¬",
    span: "¬",
    absolute: "|",
    abs: "|",
    modulus: "|",
    mod: "|",
    less-than: "<",
    lt: "<",
    less-or-equal: "≤",
    leq: "≤",
    le: "≤",
    greater-than: ">",
    gt: ">",
    greater-or-equal: "≥",
    geq: "≥",
    ge: "≥",
    equals: "=",
    equal: "=",
    eq: "=",
    rank: "=",
    not-equals: "≠",
    not-equal: "≠",
    neq: "≠",
    ne: "≠",
    length: "≠",
    len: "≠",
    depth: "≡",
    match: "≡",
    shape: "≢",
    not-match: "≢",
    identity: "⊣",
    id: "⊣",
    left: "⊣",
    right: "⊢",
    deshape: "⥊",
    reshape: "⥊",
    join: "∾",
    solo: "≍",
    couple: "≍",
    enlist: "⋈",
    pair: "⋈",
    prefix: "↑",
    take: "↑",
    suffix: "↓",
    drop: "↓",
    range: "↕",
    window: "↕",
    win: "↕",
    nudge-forward: "»",
    nudge: "»",
    shift-after: "»",
    nudge-back: "«",
    shift-before: "«",
    reverse: "⌽",
    rev: "⌽",
    rotate: "⌽",
    rot: "⌽",
    transpose: "⍉",
    trans: "⍉",
    reorder-axes: "⍉",
    indices: "/",
    replicate: "/",
    replic: "/",
    grade-up: "⍋",
    bins-up: "⍋",
    grade-down: "⍒",
    bins-down: "⍒",
    first-cell: "⊏",
    select: "⊏",
    first: "⊑",
    pick: "⊑",
    classify: "⊐",
    class: "⊐",
    index-of: "⊐",
    occurrence-count: "⊒",
    progressive-index-of: "⊒",
    mark-first: "∊",
    member-of: "∊",
    deduplicate: "⍷",
    dedup: "⍷",
    find: "⍷",
    group: "⊔",
    assert: "!",
    // modifiers:
    constant: "˙",
    self: "˜",
    swap: "˜",
    atop: "∘",
    over: "○",
    bind-right: "⟜",
    bind: "⟜",
    after: "⟜",
    bind-left: "⊸",
    before: "⊸",
    under: "⌾",
    valence: "⊘",
    choose: "◶",
    catch: "⎊",
    apply-rank: "⎉",
    cells: "˘",
    apply-depth: "⚇",
    each: "¨",
    table: "⌜",
    repeat: "⍟",
    undo: "⁼",
    inverse: "⁼",
    invert: "⁼",
    fold-element: "´",
    fold: "´",
    fold-cell: "˝",
    insert: "˝",
    scan: "`",
    // constants & variables:
    nothing: "·",
    left-argument: "𝕨",
    w: "𝕨",
    W: "𝕎",
    right-argument: "𝕩",
    x: "𝕩",
    X: "𝕏",
    left-operand: "𝔽",
    F: "𝔽",
    f: "𝕗",
    right-operand: "𝔾",
    G: "𝔾",
    g: "𝕘",
    current-function: "𝕊",
    S: "𝕊",
    s: "𝕤",
    current-modifier: "𝕣",
    r: "𝕣",
    minus: "¯",
    pi: "π",
    infinity: "∞",
    inf: "∞",
    char: "@",
  )
}






